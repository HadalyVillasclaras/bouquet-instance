{
  "PROTOTYPE": "MATERIAL",
  "TYPE": "SHADER_MATERIAL",
  "ALPHA_HASH": "FALSE",
  "ALPHA_TO_COVERAGE": "FALSE",
  "BLEND_ALPHA": 0,
  "BLEND_COLOR": {
    "IS_COLOR": "TRUE",
    "B": 0,
    "G": 0,
    "R": 0
  },
  "BLEND_DST": 205,
  "BLEND_DST_ALPHA": "NULL",
  "BLEND_EQUATION": 100,
  "BLEND_EQUATION_ALPHA": "NULL",
  "BLEND_SRC": 204,
  "BLEND_SRC_ALPHA": "NULL",
  "BLENDING": 1,
  "CLIP_INTERSECTION": "FALSE",
  "CLIP_SHADOWS": "FALSE",
  "CLIPPING": "FALSE",
  "CLIPPING_PLANES": "NULL",
  "COLOR_WRITE": "TRUE",
  "DEFAULT_ATTRIBUTE_VALUES": {
    "COLOR": "[1, 1, 1]",
    "UV": "[0, 0]",
    "UV1": "[0, 0]"
  },
  "DEFINES": "{}",
  "DEPTH_FUNC": 3,
  "DEPTH_TEST": "TRUE",
  "DEPTH_WRITE": "TRUE",
  "DITHERING": "FALSE",
  "EXTENSIONS": {
    "CLIP_CULL_DISTANCE": "FALSE",
    "MULTI_DRAW": "FALSE"
  },
  "FOG": "FALSE",
  "FORCE_SINGLE_PASS": "TRUE",
  "FRAGMENT_SHADER": "varying vec3 vColor; varying vec3 vPosition; void main() { float distanceToCenter = length(gl_PointCoord - 0.5); if(distanceToCenter > 0.6) discard; gl_FragColor = vec4(vColor, 0.9); #include <tonemapping_fragment> #include <colorspace_fragment> }",
  "GLSL_VERSION": "NULL",
  "INDEX0_ATTRIBUTE_NAME": "UNDEFINED",
  "IS_MATERIAL": "TRUE",
  "IS_SHADER_MATERIAL": "TRUE",
  "LIGHTS": "FALSE",
  "LINEWIDTH": 1,
  "NAME": "NULL",
  "OPACITY": 1,
  "POLYGON_OFFSET": "FALSE",
  "POLYGON_OFFSET_FACTOR": 0,
  "POLYGON_OFFSET_UNITS": 0,
  "PRECISION": "NULL",
  "PREMULTIPLIED_ALPHA": "FALSE",
  "SHADOW_SIDE": "NULL",
  "SIDE": 0,
  "STENCIL_FAIL": 7680,
  "STENCIL_FUNC": 519,
  "STENCIL_FUNC_MASK": 255,
  "STENCIL_REF": 0,
  "STENCIL_WRITE": "FALSE",
  "STENCIL_WRITE_MASK": 255,
  "STENCIL_Z_FAIL": 7680,
  "STENCIL_Z_PASS": 7680,
  "TONE_MAPPED": "TRUE",
  "TRANSPARENT": "FALSE",
  "UNIFORMS": {
    "PROTOTYPE": "OBJECT",
    "TYPE": "UNIFORMS"
  },
  "UNIFORMS_GROUPS": "ARRAY(0)",
  "UNIFORMS_NEED_UPDATE": "FALSE",
  "USER_DATA": "{}",
  "UUID": "8c5820fe-5814-4c8b-a525-60e672066f54",
  "VERSION": 0,
  "VERTEX_COLORS": "FALSE",
  "VERTEX_SHADER": "uniform vec2 uResolution; uniform float uSize; uniform sampler2D uParticlesTexture; attribute vec2 aParticlesUv; attribute float aSize; varying vec3 vPosition; varying vec3 vColor; uniform vec3 uColor1; uniform vec3 uColor2; uniform vec3 uColor3; void main() { vec4 particle = texture(uParticlesTexture, aParticlesUv); vec4 modelPosition = modelMatrix * vec4(particle.xyz, 1.0); vec4 viewPosition = viewMatrix * modelPosition; vec4 projectedPosition = projectionMatrix * viewPosition; gl_Position = projectedPosition; float sizeIn = smoothstep(0.0, 0.1, particle.a); float sizeOut = 1.0 - smoothstep(0.7, 1.0, particle.a); float size = min(sizeIn, sizeOut); gl_PointSize = size * aSize * uSize * uResolution.y; gl_PointSize *= (1.0 / - viewPosition.z); vec3 color = vec3(1.0, 0.1, 0.9); float depth = (modelPosition.y + 1.0) * 0.5; if (depth <= 0.5) { color = mix(uColor1, uColor2, depth * 2.0); } else { color = mix(uColor2, uColor3, (depth - 0.5) * 1.8); } vColor = color; }",
  "VISIBLE": "TRUE",
  "WIREFRAME": "FALSE",
  "WIREFRAME_LINEWIDTH": 1,
  "_ALPHA_TEST": 0,
  "_LISTENERS": {
    "DISPOSE": [
      "Æ’ ON_MATERIAL_DISPOSE(E)"
    ],
    "PROTOTYPE": "ARRAY"
  },
  "ID": 10,
  "ALPHA_TEST": "(...)"
}
